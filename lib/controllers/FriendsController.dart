import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

import 'package:provider/provider.dart';
import '../models/FriendRequestModel.dart';
import '../providers/user_provider.dart';

class FriendsController extends GetxController {
  // Observable lists for users and friends
  var users = <dynamic>[].obs;
  var friends = <dynamic>[].obs;
  var displayedList = <dynamic>[].obs;
  var friendRequests = <dynamic>[].obs; // List to store pending friend requests

  // Observable variables for toggling view and search query
  var isViewingFriends = false.obs;
  var searchQuery = ''.obs;

  @override
  void onInit() {
    super.onInit();
    fetchUsers(); // Fetch users when the controller initializes
    fetchFriendRequests(); // Fetch pending friend requests
  }

  // Fetch users from the API
  Future<void> fetchUsers() async {
    final userProvider = Provider.of<UserProvider>(Get.context!, listen: false);
    final token = userProvider.token; // Retrieve the token

    const url = 'http://10.0.2.2:3001/api/auth/users';

    try {
      final response = await http.get(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer $token', // Add Authorization header
        },
      );

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        users.value = responseData['data'];
        updateDisplayedList(); // Update the displayed list
      } else {
        throw Exception('Failed to load users');
      }
    } catch (error) {
      print('Error fetching users: $error');
    }
  }

  // Fetch friend requests (pending)
  Future<void> fetchFriendRequests() async {
    final userProvider = Provider.of<UserProvider>(Get.context!, listen: false);
    final token = userProvider.token; // Retrieve the token

    const url = 'http://10.0.2.2:3001/api/friend-requests/pending'; // Endpoint for pending requests

    try {
      final response = await http.get(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer $token', // Add Authorization header
        },
      );

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        friendRequests.value = responseData['requests'];
      } else {
        throw Exception('Failed to load friend requests');
      }
    } catch (error) {
      print('Error fetching friend requests: $error');
    }
  }

  // Send a friend request to another user
  final String apiUrl = 'http://10.0.2.2:3001/api/friendRequest/friend-requests'; // API base URL

  // Send a friend request
  Future<void> sendFriendRequest(int senderId, int receiverId) async {
    print('Sender ID: $senderId');
    FriendRequest friendRequest = FriendRequest(
      friendRequestId: 0,  // This will be generated by the backend
      senderId: senderId,
      receiverId: receiverId,
      status: 'pending', // Default status when request is created
      createdAt: DateTime.now(),
    );

    Map<String, dynamic> requestJson = friendRequest.toJson();

    try {
      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode(requestJson),
      );

      if (response.statusCode == 201) {
        // Friend request sent successfully
        print('Friend request sent successfully');
      } else {
        // Handle failure
        print('Failed to send friend request: ${response.body}');
      }
    } catch (error) {
      // Handle error
      print('Error sending friend request: $error');
    }
  }


  // Respond to a friend request (Accept/Reject)
  Future<void> respondToFriendRequest(int requestId, String status) async {
    final userProvider = Provider.of<UserProvider>(Get.context!, listen: false);
    final token = userProvider.token; // Retrieve the token

    const url = 'http://10.0.2.2:3001/api/friend-requests/respond';

    try {
      final response = await http.put(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer $token', // Add Authorization header
        },
        body: json.encode({
          'request_id': requestId,
          'status': status,
        }),
      );

      if (response.statusCode == 200) {
        // Update the friend requests list
        fetchFriendRequests();
      } else {
        throw Exception('Failed to respond to friend request');
      }
    } catch (error) {
      print('Error responding to friend request: $error');
    }
  }

  // Toggle between users and friends view
  void toggleView() {
    isViewingFriends.value = !isViewingFriends.value;
    updateDisplayedList();
  }

  // Update the displayed list based on toggle and search query
  void updateDisplayedList() {
    final list = isViewingFriends.value ? friends : users;
    displayedList.value = list
        .where((user) => user['email']
        .toLowerCase()
        .contains(searchQuery.value.toLowerCase()))
        .toList();
  }

  // Filter the list based on search query
  void filterList(String query) {
    searchQuery.value = query;
    updateDisplayedList();
  }
}
